{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\namyd\\\\mvc2-randomizer\\\\src\\\\components\\\\TeamGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { characters, getRandomCharacter } from '../data/characters';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TeamGenerator = () => {\n  _s();\n  const defaultTeam = [characters.find(char => char.name === 'Magneto'), characters.find(char => char.name === 'Storm'), characters.find(char => char.name === 'Psylocke')];\n  const [team, setTeam] = useState(defaultTeam);\n  const [isSpinning, setIsSpinning] = useState([false, false, false]);\n  const [isChosen, setIsChosen] = useState([false, false, false]);\n  const generateTeam = () => {\n    setIsSpinning([true, false, false]);\n    setIsChosen([false, false, false]);\n    setTeam([...defaultTeam]); // Reset to default team\n\n    const selectCharacter = index => {\n      setTimeout(() => {\n        setTeam(prevTeam => {\n          const newTeam = [...prevTeam];\n          newTeam[index] = getRandomCharacter(newTeam.filter(Boolean).map(c => c.name));\n          return newTeam;\n        });\n        setIsSpinning(prev => {\n          const next = [...prev];\n          next[index] = false;\n          if (index < 2) next[index + 1] = true;\n          return next;\n        });\n        setIsChosen(prev => {\n          const next = [...prev];\n          next[index] = true;\n          return next;\n        });\n        if (index < 2) {\n          selectCharacter(index + 1);\n        }\n      }, 2000); // Duration for each character selection\n    };\n    selectCharacter(0);\n  };\n  const renderCharacterSlot = index => {\n    const char = team[index];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-slot\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `character-card ${isSpinning[index] ? 'spinning' : ''} ${isChosen[index] ? 'chosen' : ''}`,\n        children: isSpinning[index] ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: characters[Math.floor(Math.random() * characters.length)].image,\n          alt: \"Spinning\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: char.image,\n            alt: char.name,\n            onError: e => {\n              e.target.onerror = null;\n              e.target.src = '/images/characters/default.png';\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this), isChosen[index] && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"character-name\",\n            children: char.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  };\n  useEffect(() => {\n    const intervals = isSpinning.map((spinning, index) => {\n      if (spinning) {\n        return setInterval(() => {\n          setTeam(prev => {\n            const newTeam = [...prev];\n            newTeam[index] = characters[Math.floor(Math.random() * characters.length)];\n            return newTeam;\n          });\n        }, 100);\n      }\n      return null;\n    });\n    return () => intervals.forEach(interval => interval && clearInterval(interval));\n  }, [isSpinning]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Random Team Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"team-display-large\",\n      children: [0, 1, 2].map(renderCharacterSlot)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"team-generator-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: generateTeam,\n        disabled: isSpinning.some(Boolean),\n        className: `team-generator-button ${isSpinning.some(Boolean) ? 'generating' : ''}`,\n        children: isSpinning.some(Boolean) ? 'Generating...' : 'Generate Team'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(TeamGenerator, \"MZIJSiXHDv6Pg+sRFdfu5EBzYwo=\");\n_c = TeamGenerator;\nexport default TeamGenerator;\nvar _c;\n$RefreshReg$(_c, \"TeamGenerator\");","map":{"version":3,"names":["React","useState","useEffect","characters","getRandomCharacter","jsxDEV","_jsxDEV","Fragment","_Fragment","TeamGenerator","_s","defaultTeam","find","char","name","team","setTeam","isSpinning","setIsSpinning","isChosen","setIsChosen","generateTeam","selectCharacter","index","setTimeout","prevTeam","newTeam","filter","Boolean","map","c","prev","next","renderCharacterSlot","className","children","src","Math","floor","random","length","image","alt","fileName","_jsxFileName","lineNumber","columnNumber","onError","e","target","onerror","intervals","spinning","setInterval","forEach","interval","clearInterval","onClick","disabled","some","_c","$RefreshReg$"],"sources":["C:/Users/namyd/mvc2-randomizer/src/components/TeamGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { characters, getRandomCharacter } from '../data/characters';\r\n\r\nconst TeamGenerator = () => {\r\n  const defaultTeam = [\r\n    characters.find(char => char.name === 'Magneto'),\r\n    characters.find(char => char.name === 'Storm'),\r\n    characters.find(char => char.name === 'Psylocke')\r\n  ];\r\n\r\n  const [team, setTeam] = useState(defaultTeam);\r\n  const [isSpinning, setIsSpinning] = useState([false, false, false]);\r\n  const [isChosen, setIsChosen] = useState([false, false, false]);\r\n\r\n  const generateTeam = () => {\r\n    setIsSpinning([true, false, false]);\r\n    setIsChosen([false, false, false]);\r\n    setTeam([...defaultTeam]); // Reset to default team\r\n\r\n    const selectCharacter = (index) => {\r\n      setTimeout(() => {\r\n        setTeam(prevTeam => {\r\n          const newTeam = [...prevTeam];\r\n          newTeam[index] = getRandomCharacter(newTeam.filter(Boolean).map(c => c.name));\r\n          return newTeam;\r\n        });\r\n        \r\n        setIsSpinning(prev => {\r\n          const next = [...prev];\r\n          next[index] = false;\r\n          if (index < 2) next[index + 1] = true;\r\n          return next;\r\n        });\r\n\r\n        setIsChosen(prev => {\r\n          const next = [...prev];\r\n          next[index] = true;\r\n          return next;\r\n        });\r\n\r\n        if (index < 2) {\r\n          selectCharacter(index + 1);\r\n        }\r\n      }, 2000); // Duration for each character selection\r\n    };\r\n\r\n    selectCharacter(0);\r\n  };\r\n\r\n  const renderCharacterSlot = (index) => {\r\n    const char = team[index];\r\n    return (\r\n      <div key={index} className=\"character-slot\">\r\n        <div className={`character-card ${isSpinning[index] ? 'spinning' : ''} ${isChosen[index] ? 'chosen' : ''}`}>\r\n          {isSpinning[index] ? (\r\n            <img \r\n              src={characters[Math.floor(Math.random() * characters.length)].image} \r\n              alt=\"Spinning\" \r\n            />\r\n          ) : (\r\n            <>\r\n              <img \r\n                src={char.image} \r\n                alt={char.name} \r\n                onError={(e) => { e.target.onerror = null; e.target.src = '/images/characters/default.png' }} \r\n              />\r\n              {isChosen[index] && (\r\n                <p className=\"character-name\">{char.name}</p>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const intervals = isSpinning.map((spinning, index) => {\r\n      if (spinning) {\r\n        return setInterval(() => {\r\n          setTeam(prev => {\r\n            const newTeam = [...prev];\r\n            newTeam[index] = characters[Math.floor(Math.random() * characters.length)];\r\n            return newTeam;\r\n          });\r\n        }, 100);\r\n      }\r\n      return null;\r\n    });\r\n\r\n    return () => intervals.forEach(interval => interval && clearInterval(interval));\r\n  }, [isSpinning]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Random Team Generator</h2>\r\n      <div className=\"team-display-large\">\r\n        {[0, 1, 2].map(renderCharacterSlot)}\r\n      </div>\r\n      <div className=\"team-generator-button-container\">\r\n        <button \r\n          onClick={generateTeam} \r\n          disabled={isSpinning.some(Boolean)}\r\n          className={`team-generator-button ${isSpinning.some(Boolean) ? 'generating' : ''}`}\r\n        >\r\n          {isSpinning.some(Boolean) ? 'Generating...' : 'Generate Team'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TeamGenerator;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}